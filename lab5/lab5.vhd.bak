library ieee;
use ieee.std.logic_1164.ALL;

entity Control IS 
port(
	clk, mclk: in std_logic;
	enable: in std_logic;
	statusC, status2: in std_logic;
	INST: in std_logic_vector(31 downto 0);
	A_Mux, B_Mux: out std_logic;
	IM_MUX1, REG_Mux: out std_logic;
	IM_MUX2, DATA_Mux: out std_logic(1 downto 0);
	ALU_op: out std_logic_vector (2 downto 0);
	inc_PC, ld_PC: out std_logic;
	clr_IR: out std_logic;
	ld_IR: out std_logic;
	clr_A, clr_B, clr_C, clr_Z: out std_logic;
	T: out std_logic vector(2 downto 0);
	wen, en: out std_logic);
end Control;

Architecture description OF Control Is
	type STATETYPE IS (state_0, state_1, state_2);
	signal present_state: STATETYPE;
	signal Instruction_sig: std_logic_vector(3 downto 0);
	signal Instruction sig2: std_logic_vector(7 downto 0);
BEGIN
	Instruction_sig <= INST(31 downto 28);
	Instruction_sig2 <= INST(31 downto 24);
	
-- operation decoder --
process (presnt_state, INST, statusC, statusZ, enable, Instruction_sig2)
BEGIN
	if enable = '1' then 
		if present_state = statue_0 then 
			DATA_Mux <= "00"; --fetch address of next instruction
			clr_IR <= '0';
			ld_IR <= '1';
			ld_PC <= '0';
			inc_PC< = '0';
			clr_A <= '0';
			ld_A <= '0';
			ld_B <= '0';
			clr_B <= '0';
			clr_C <= '0';
			ld_C <= '0';
			clr_Z <= '0';
			ld_Z <= '0';
			en <= '0';
			wen<= '0';
			
-----------state_1----------------------------
		elsif present_state = state_1 then
			clr_IR <= '0'; --increment PC counter
			ld_IR <= '0';
			ld_PC <= '1';
			inc_PC = '1';
			clr_A <= '0';
			ld_A <= '0';
			ld_B <= '0';
			clr_B <= '0';
			clr_C <= '0';
			ld_C <= '0';
			clr_Z <= '0';
			ld_Z <= '0';
			en <= '0';
			wen<= '0';
			
			if Instruction_sig = "0010" then -- STA
				clr_IR <= '0';
				ld_IR <= '0';
				ld_PC <= '1';
				inc_PC = '1';
				clr_A <= '0';
				ld_A <= '0';
				ld_B <= '0';
				clr_B <= '0';
				clr_C <= '0';
				ld_C <= '0';
				clr_Z <= '0';
				ld_Z <= '0';
				REG_Mux <= '0';
				DATA_Mux <= "00";
				en <= '1';
				wen<= '1';
			
			elsif Instruction_sig = "0011" then --STB
				clr_IR <= '0';
				ld_IR <= '0';
				ld_PC <= '1';
				inc_PC = '1';
				clr_A <= '0';
				ld_A <= '0';
				ld_B <= '0';
				clr_B <= '0';
				clr_C <= '0';
				ld_C <= '0';
				clr_Z <= '0';
				ld_Z <= '0';
				REG_Mux <= '1';
				DATA_Mux <= "00";
				en <= '1';
				wen<= '1';	
				
			elsif Instruction_sig = "1001" then --LDA
				clr_IR <= '0';
				ld_IR <= '0';
				ld_PC <= '1';
				inc_PC = '1';
				clr_A <= '0';
				ld_A <= '1';
				ld_B <= '0';
				clr_B <= '0';
				clr_C <= '0';
				ld_C <= '0';
				clr_Z <= '0';
				ld_Z <= '0';
				A_Mux <= '0';
				DATA_Mux <= "01";
				en <= '1';
				wen<= '0';	

			elsif Instruction_sig = "1010" then --LDB
				clr_IR <= '0';
				ld_IR <= '0';
				ld_PC <= '1';
				inc_PC = '1';
				clr_A <= '0';
				ld_A <= '0';
				ld_B <= '1';
				clr_B <= '0';
				clr_C <= '0';
				ld_C <= '0';
				clr_Z <= '0';
				ld_Z <= '0';
				A_Mux <= '0';
				DATA_Mux <= "01";
				en <= '1';
				wen<= '0';
			end if; -- end if for load store in stage 1		
			
-----------state_2----------------------------
		elsif present_state = state_2 then
			if Instruction_sig = "0101" then --JUMP
				clr_IR <= '0';
				ld_IR <= '0';
				ld_PC <= '1';
				inc_PC = '0';
				clr_A <= '0';
				ld_A <= '0';
				ld_B <= '0';
				clr_B <= '0';
				clr_C <= '0';
				ld_C <= '0';
				clr_Z <= '0';
				ld_Z <= '0';
				
			elsif Instruction_sig = "0110" then --BEQ
				clr_IR <= '0';
				ld_IR <= '0';
				ld_PC <= '1';
				inc_PC = '0';
				clr_A <= '0';
				ld_A <= '0';
				ld_B <= '0';
				clr_B <= '0';
				clr_C <= '0';
				ld_C <= '0';
				clr_Z <= '0';
				ld_Z <= '0';
				
			elsif Instruction_sig = "1000" then --BNE
				clr_IR <= '0';
				ld_IR <= '0';
				ld_PC <= '1';
				inc_PC = '0';
				clr_A <= '0';
				ld_A <= '0';
				ld_B <= '0';
				clr_B <= '0';
				clr_C <= '0';
				ld_C <= '0';
				clr_Z <= '0';
				ld_Z <= '0';
				
			elsif Instruction_sig = "1001" then --BNE
				clr_IR <= '0';
				ld_IR <= '0';
				ld_PC <= '1';
				inc_PC = '0';
				clr_A <= '0';
				ld_A <= '0';
				ld_B <= '0';
				clr_B <= '0';
				clr_C <= '0';
				ld_C <= '0';
				clr_Z <= '0';
				ld_Z <= '0';