library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity data_path is
port(
    --Clock Signal
    CLK, mCLk : in std_logic;

    --Memory Signals
    WEN, EN : in std_logic;

    --Register Control Signals (CIR and LD)
    CLF_A, Ld_A : in std_logic;
    CLF_B, Ld_B : in std_logic;
    CLF_C, Ld_C : in std_logic;
    CLF_Z, Ld_Z : in std_logic;
    CLFPC, Ld_PC : in std_logic;
    CLFIR, Ld_IR : in std_logic;

    --Register Outputs
    Out_A : out std_logic_vector(31 downto 0);
    Out_B : out std_logic_vector(31 downto 0);
    Out_C : out std_logic;
    Out_Z : out std_logic;
    Out_PC : out std_logic_vector(31 downto 0);
    Out_IR : out std_logic_vector(31 downto 0);

    --Special Inputs to PC
    Inc_PC : in std_logic;

    --Address and Data Bus signals for debugging
    ADDR_OUT : out std_logic_vector(31 downto 0);
    DATA_IN : in std_logic_vector(31 downto 0);
    DATA_BUS, MEN_OUT, MEN_IN : out std_logic_vector(31 downto 0);
    MEN_ADDR : out unsigned(7 downto 0);

    --Various MUX controls
    DATA_MUX : in std_logic_vector(1 downto 0);
    REG_MUX : in std_logic;
    A_MUX, B_MUX : in std_logic;
    IN_MUX1 : in std_logic;
    IN_MUX2 : in std_logic_vector(1 downto 0);

    --ALU Operations
    ALU_Op : in std_logic_vector(2 downto 0)
);
end entity;

architecture Behavior of Data_Path is
    --Component Instantiations
    --Data Memory Module
    component data_mem is
    port(
        clk : in std_logic;
        addr : in unsigned(7 downto 0);
        data_in : in std_logic_vector(31 downto 0);
        wen : in std_logic;
        en : in std_logic;
        data_out : out std_logic_vector(31 downto 0)
    );
    end component;

    --Register32
    component register32 is
    port(
        d : in std_logic_vector(31 downto 0);
        ld : in std_logic;
        clr : in std_logic;
        clk : in std_logic;
        Q : out std_logic_vector(31 downto 0)
    );
    end component;

    --Program Counter
    component pc is
    port(
        clr : in std_logic;
        clk : in std_logic;
        ld : in std_logic;
        inc : in std_logic;
        d : in std_logic_vector(31 downto 0);
        q : out std_logic_vector(31 downto 0)
    );
    end component;

    --LZE
    component LZE is
    port(
        LZE_in : in std_logic_vector(31 downto 0);
        LZE_out : out std_logic_vector(31 downto 0)
    );
    end component;

    --UZE
    component UZE is
    port(
        UZE_in : in std_logic_vector(31 downto 0);
        UZE_out : out std_logic_vector(31 downto 0)
    );
    end component;

    --RED
    component RED is
    port(
        RED_in : in std_logic_vector(31 downto 0);
        RED_out : out unsigned(7 downto 0)
    );
    end component;

    --Mux2to1
    component mux2to1 is
    port(
        s : in std_logic;
        w0, w1 : in std_logic_vector(31 downto 0);
        f : out std_logic_vector(31 downto 0)
    );
    end component;

    --Mux4to1
    component mux4to1 is
    port(
        s : in std_logic_vector (1 downto 0);
        X1, X2, X3, X4 : in std_logic_vector (31 downto 0);
        f : out std_logic_vector (31 downto 0)
    );
    end component;

    --ALU
    component alu is
    port(
        a : in std_logic_vector(31 downto 0);
        b : in std_logic_vector(31 downto 0);
        op : in std_logic_vector(2 downto 0);
        result : out std_logic_vector(31 downto 0);
        zero : out std_logic;
        cout : out std_logic
    );
    end component;

    --Signal Instantiations
    signal IR_OUT : std_logic_vector(31 downto 0);
    signal data_bus_s : std_logic_vector(31 downto 0);
    signal LZE_out_PC : std_logic_vector(31 downto 0);
    signal LZE_out_A_Mux : std_logic_vector(31 downto 0);
    signal LZE_out_B_Mux : std_logic_vector(31 downto 0);
    signal RED_out_Data_Mem : unsigned(7 downto 0);
    signal A_Mux_out : std_logic_vector(31 downto 0);
    signal B_Mux_out : std_logic_vector(31 downto 0);
    signal reg_A_out : std_logic_vector(31 downto 0);
    signal reg_B_out : std_logic_vector(31 downto 0);
    signal reg_Mux_out : std_logic_vector(